{"remainingRequest":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/soonkpaik/Desktop/NYC Project/code/src/views/YearView.vue?vue&type=template&id=769351bc&scoped=true","dependencies":[{"path":"/Users/soonkpaik/Desktop/NYC Project/code/src/views/YearView.vue","mtime":1624553909718},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+VGhpcyBpcyBZZWFyIFZpZXc8L2Rpdj4KPGRpdiBjbGFzcz0nZ3JhcGhjb250YWluZXInIHJlZj0nZ3JhcGhjb250YWluZXInCj4KCjxsaW5lLWdyYXBoIGNsYXNzPSdncmFwaGNvbnRhaW5lcicKOndpZHRoPSd3aWR0aCcKOmhlaWdodD0naGVpZ2h0Jwo6bWFyZ2luPSdtYXJnaW4nCjpkYXRhR3JvdXA9J2RhdGFHcm91cCcKOnhBeGlzTmFtZT0neEF4aXNOYW1lJwo6eUF4aXNOYW1lPSd5QXhpc05hbWUnCjpsaW5lQ29sb3JzPSdsaW5lQ29sb3JzJwo+PC9saW5lLWdyYXBoPgo8L2Rpdj4K"},{"version":3,"sources":["/Users/soonkpaik/Desktop/NYC Project/code/src/views/YearView.vue"],"names":[],"mappings":";AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/soonkpaik/Desktop/NYC Project/code/src/views/YearView.vue","sourceRoot":"","sourcesContent":["<template>\n<div>This is Year View</div>\n<div class='graphcontainer' ref='graphcontainer'\n>\n\n<line-graph class='graphcontainer'\n:width='width'\n:height='height'\n:margin='margin'\n:dataGroup='dataGroup'\n:xAxisName='xAxisName'\n:yAxisName='yAxisName'\n:lineColors='lineColors'\n></line-graph>\n</div>\n</template>\n<script>\nexport default {\n\n    data(){\n        return{\n            rawData:undefined,\n            // targetYearData in boroughAnalysis case\n            dataGroup:[],\n\n            width:0,\n            height:0,\n            numberOfstep:10,\n            xAxisName:undefined,\n            yAxisName:undefined,\n            margin:{vertical:undefined,horizontal:undefined},\n            selectedCounty:undefined,\n            countyPrecinctCount:undefined,\n            lineColors:['#F78F67','#66C7FF'],\n            selectedPrecinct:undefined,\n            maxCosts:[]\n            // 여기있는 selectedCounty는 나중에 합칠 때 지운다!!!!!!\n        }\n    },\n    async mounted(){\n        this.selectedCounty=this.$store.getters.boroughSelected;\n        await this.$store.dispatch('ByTicketData/loadYearData');\n        this.rawData= this.$store.getters['ByTicketData/targetYearData']\n        this.getMaxCost()\n        // 이거 나중에  68이 아니라 진짜 받아서 넣어야한다!!!\n        this.$store.dispatch('ByTicketData/setTargetPrecinct',68);\n        this.selectedPrecinct=this.$store.getters['ByTicketData/targetPrecinct']\n        this.createCountyGraphDataSet(this.rawData);\n        this.createPrecinctGraphDataSet()\n        this.getWidthHeight();\n    },\n    computed:{\n        targetCountyData(){return this.$store.getters['ByTicketData/selectedBoroughData']},\n        maxCost(){\n            return Math.max(...this.maxCosts)\n        }\n    },\n    methods:{\n        getMaxCost(){\n            // Precinct Max Value\n            const targetPrecinctArr=this.rawData.filter(d=>d['Precinct']==this.selectedPrecinct);\n\n            var costByPlatePrecinct =[];\n            var platesPrecinct = [...new Set(targetPrecinctArr.map(d=>d['Plate']))];\n            \n            platesPrecinct.forEach((d)=>{\n\n                var eachPlate = targetPrecinctArr.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n                costByPlatePrecinct.push(eachPlateCostSum)\n\n            });\n\n            var costsumsPrecinct = costByPlatePrecinct.map(d=>d.costSum);\n            var maxCostPrecinct = Math.max(...costsumsPrecinct)\n            this.maxCosts.push(maxCostPrecinct);\n\n            // County Max Value\n\n\n            this.countyPrecinctCount = [...new Set(this.targetCountyData.map(d=>d['Precinct']))].length;\n\n\n            var costByPlateCounty=[];\n            var platesCounty = [... new Set(this.targetCountyData.map(d=>d['Plate']))];\n\n            platesCounty.forEach((d)=>{\n\n                var eachPlate = this.targetCountyData.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n\n                costByPlateCounty.push(eachPlateCostSum)\n\n\n            });\n\n            var costsumsCounty = costByPlateCounty.map(d=>d.costSum);\n            var maxCostCounty = Math.max(...costsumsCounty)\n            this.maxCosts.push(maxCostCounty);\n\n        },\n\n        createPrecinctGraphDataSet(){\n            const targetPrecinctArr=this.rawData.filter(d=>d['Precinct']==this.selectedPrecinct);\n\n            var costByPlatePrecinct =[];\n            var platesPrecinct = [...new Set(targetPrecinctArr.map(d=>d['Plate']))];\n            \n            platesPrecinct.forEach((d)=>{\n\n                var eachPlate = targetPrecinctArr.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n                costByPlatePrecinct.push(eachPlateCostSum)\n\n            });\n\n            var finalArr =[];\n            var stepSize = this.maxCost/this.numberOfstep;\n\n            for(let i=0;i<this.numberOfstep;i++){\n                var count =0;\n                var paymentTop = stepSize*(i+1);\n                var paymentBottom =stepSize*(i);\n                costByPlatePrecinct.forEach((t)=>{\n                    if(i==0){\n                        if(t.costSum>=paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }else{\n                        if(t.costSum>paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }\n                })\n                finalArr.push({\n                    costWidth:paymentTop,\n                    cases:count\n                });\n            }\n            this.dataGroup.push(finalArr)\n\n        },\n        getWidthHeight(){\n            this.width=this.$refs.graphcontainer.clientWidth;\n            this.height=this.$refs.graphcontainer.clientHeight;\n            console.log(this.width,this.height)\n            this.margin.vertical=this.height*0.1;\n            this.margin.horizontal=this.width*0.05;\n            console.log(this.margin)\n        },\n        createCountyGraphDataSet(){\n\n            this.countyPrecinctCount = [...new Set(this.targetCountyData.map(d=>d['Precinct']))].length;\n\n\n            var costByPlateCounty=[];\n            var plates = this.targetCountyData.map(d=>d['Plate']);\n            var uniquePlates = [... new Set(plates)];\n\n            uniquePlates.forEach((d)=>{\n\n                var eachPlate = this.targetCountyData.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n\n                costByPlateCounty.push(eachPlateCostSum)\n\n\n            });\n\n\n            var finalArr =[];\n            var stepSize = this.maxCost/this.numberOfstep;\n\n\n            for(let i=0;i<this.numberOfstep;i++){\n                var count =0;\n                var paymentTop = stepSize*(i+1);\n                var paymentBottom =stepSize*(i);\n                costByPlateCounty.forEach((t)=>{\n                    if(i==0){\n                        if(t.costSum>=paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }else{\n                        if(t.costSum>paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }\n                })\n                finalArr.push({\n                    costWidth:paymentTop,\n                    cases:count/this.countyPrecinctCount\n                });\n            }\n            this.dataGroup.push(finalArr)\n            this.xAxisName=Object.keys(finalArr[0])[0]\n            this.yAxisName=Object.keys(finalArr[0])[1]\n         \n        }\n    }\n}\n</script>\n<style scoped>\n.graphcontainer{\n    width:500px;\n    height:500px;\n}\n</style>"]}]}