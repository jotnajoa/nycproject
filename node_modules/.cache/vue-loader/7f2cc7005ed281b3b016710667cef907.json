{"remainingRequest":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/soonkpaik/Desktop/NYC Project/code/src/components/UI/LineGraph.vue?vue&type=template&id=0a22086f","dependencies":[{"path":"/Users/soonkpaik/Desktop/NYC Project/code/src/components/UI/LineGraph.vue","mtime":1624588433725},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2PgogICAgICAgIDxzdmcgCiAgICAgICAgdi1pZj0neE1heCcKICAgICAgICBpZD0nbGluZS1jaGFydCcgOmhlaWdodD0naGVpZ2h0JyA6d2lkdGg9J3dpZHRoJz4KCiAgICAgICAgICAgIDwhLS0gPHBhdGggdi1mb3I9JyhkYXRhLGluZGV4KSBvZiBkYXRhR3JvdXAnIDprZXk9J2luZGV4JyBjbGFzcz0nbGluZSc+PC9wYXRoPiAtLT4KICAgICAgICAgICAgPCEtLSBvciBJIGNhbiBjcmVhdGUgdGhlbSBpbiBzY3JpcHQgLS0+CiAgICAgICAgICAgIDxnIGNsYXNzPSdheGlzIHgtYXhpcycgOnRyYW5zZm9ybT0nYHRyYW5zbGF0ZSgkezB9LCR7aGVpZ2h0LW1hcmdpbi52ZXJ0aWNhbH0pYCc+PC9nPgogICAgICAgICAgICA8ZyBjbGFzcz0nYXhpcyB5LWF4aXMnIDp0cmFuc2Zvcm09J2B0cmFuc2xhdGUoJHttYXJnaW4uaG9yaXpvbnRhbH0sMClgJz48L2c+Cgo8IS0tIOqysOq1reyXkOuKlCBwYXRoIOuPhCB2LWZvcuuhnCDsl67slrTrtJDslbztlaggLS0+CiAgICAgICAgPC9zdmc+CiAgICA8L2Rpdj4K"},{"version":3,"sources":["/Users/soonkpaik/Desktop/NYC Project/code/src/components/UI/LineGraph.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC;QACA,CAAC,CAAC,CAAC;QACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAE3C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACtC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnF,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEvF,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/soonkpaik/Desktop/NYC Project/code/src/components/UI/LineGraph.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <svg \n        v-if='xMax'\n        id='line-chart' :height='height' :width='width'>\n\n            <!-- <path v-for='(data,index) of dataGroup' :key='index' class='line'></path> -->\n            <!-- or I can create them in script -->\n            <g class='axis x-axis' :transform='`translate(${0},${height-margin.vertical})`'></g>\n            <g class='axis y-axis' :transform='`translate(${margin.horizontal},0)`'></g>\n\n<!-- 결국에는 path 도 v-for로 엮어봐야함 -->\n        </svg>\n    </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nexport default {\n    props:['width','height','margin','dataGroup','xAxisName','yAxisName','lineColors'],\n    data(){\n        return{\n            xAxis:undefined,\n            yAxis:undefined,\n            xMax:0,yMax:0,xMin:0,yMin:0,\n            xScale:undefined,yScale:undefined\n        }\n\n    },\n    computed:{\n        graphData(){\n            var cloned= [...this.dataGroup]\n            return cloned.sort((a,b)=>d3.ascending(a[this.xAxisName],b[this.xAxisName]))\n        }\n    },\n    methods:{\n        addLabel(){\n            d3.select('svg').append('text').classed('x-label',true)\n            .attr('transform',`translate(${this.width-this.margin.horizontal*1.5},${this.height-this.margin.vertical})`)\n            .text('cost').style('fill','#F1F5FB').style('font-size','10px')\n\n\n            d3.select('svg').append('text').classed('y-label',true)\n            .attr('transform',`translate(${0},${this.margin.vertical/2})`)\n            .text(this.yAxisName).style('fill','#F1F5FB').style('font-size','10px')\n        },\n        defineDataKeys(){\n            console.log('datagroup was not loaded?',this.dataGroup)\n            // this.xAxisName=Object.keys(this.dataGroup[0][0])[0];\n            // this.yAxisName=Object.keys(this.dataGroup[0][0])[1];\n        },\n        // \n        createAxis(){\n\n            var xExtents =[] ;\n            \n            this.graphData.forEach((d)=>{\n                var subArr = d;\n                var extents = subArr.map(t=>t[this.xAxisName]);\n                xExtents.push(extents)\n            })\n\n            var maxXvals =[];\n\n            xExtents.forEach((t)=>{\n                maxXvals.push(d3.max(t))\n            });\n            \n            var yExtents = [];\n            \n            this.graphData.forEach((d)=>{\n                var subArr = d;\n                var extents = subArr.map(t=>t[this.yAxisName]);\n                yExtents.push(extents)\n            })\n\n            var maxYvals=[];\n            yExtents.forEach((t)=>{\n                maxYvals.push(d3.max(t))\n            });\n\n            this.xMax= d3.max(maxXvals);\n            this.yMax= d3.max(maxYvals);\n\n            console.log(this.xMax,this.yMax)\n\n            this.xScale = d3.scaleLinear().domain([this.xMin,this.xMax]).range([this.margin.horizontal,this.width-this.margin.horizontal*2])\n            this.yScale = d3.scaleLinear().domain([this.yMin,this.yMax]).range([this.height-this.margin.vertical,this.margin.vertical]);\n            \n            const xAxis = d3.axisBottom(this.xScale);\n            const yAxis = d3.axisLeft(this.yScale);\n\n            d3.select('.x-axis').transition().duration(1000).call(xAxis.tickSize(0))\n            d3.select('.y-axis').transition().duration(1000).call(yAxis.tickSize(-this.width+this.margin.horizontal*2).ticks(10))\n            d3.select('.y-axis > .domain').remove()\n            d3.selectAll('.y-axis > .tick > line').style('stroke-width',0.5).style('opacity',0.2).style(\"stroke-dasharray\", (\"2, 2\"))\n            d3.select('.x-axis').style('color','#F1F5FB')\n            d3.select('.y-axis').style('color','#F1F5FB')\n            d3.selectAll('.domain').style('stroke-width',0.5)\n        },\n        line(){\n            return d3.line()\n            .x(d=>this.xScale(d[this.xAxisName]))\n            .y(d=>this.yScale(d[this.yAxisName]))\n        },\n        drawLines(linedata,index){\n            // this line function will interate graphData and plot line graphs one by one\n            if(index==0){\n\n            var path = d3.select('#line-chart')\n            .append('path')\n            .attr('class','graph-line')\n            .classed(`${index}-line`,true)\n            .attr('d',this.line()(linedata))\n            .attr('stroke',this.lineColors[index])\n            .attr('stroke-width',1)\n            .attr('fill','none')\n            .style('opacity',0)\n\n            if(path.node()){\n            var pathLength = path.node().getTotalLength();\n            console.log(pathLength)\n\n            path.attr('stroke-dasharray',pathLength)\n            .attr('stroke-dashoffset',pathLength)\n            .transition()\n            .duration(1000)\n            .attr('stroke-dashoffset',0)\n            .style('opacity',1)\n            }\n            \n            }else{\n            d3.select('#line-chart')\n            .append('path')\n            .attr('class','graph-line')\n            .classed(`${index}-line`,true)\n            .attr('d',this.line()(linedata))\n            .attr('stroke',this.lineColors[index])\n            .attr('stroke-width',1)\n            .attr('fill','none')\n            }\n            this.addLabel()\n\n        },\n        clearLines(){\n            d3.selectAll('.graph-line').remove()\n        }\n    },\n    created(){\n\n        const unwatch = this.$watch(\n            ()=>this.dataGroup,\n            data =>{\n                if(data){\n                    this.defineDataKeys();\n                    this.createAxis();\n                    \n                    this.graphData.forEach((d,i)=>{\n                        this.drawLines(d,i)\n                    })\n                    \n                    unwatch()\n                }\n            }\n        )\n\n    },\n    updated(){\n\n        this.createAxis();\n        this.clearLines();\n        this.graphData.forEach((d,i)=>{\n            this.drawLines(d,i)\n        })\n\n    }\n}\n</script>\n<style>\n\n</style>"]}]}