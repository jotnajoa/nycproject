{"remainingRequest":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/soonkpaik/Desktop/NYC Project/code/src/components/BoroughAnalysis.vue?vue&type=style&index=0&id=1f6edd88&scoped=true&lang=css","dependencies":[{"path":"/Users/soonkpaik/Desktop/NYC Project/code/src/components/BoroughAnalysis.vue","mtime":1624672949617},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1616796459000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ncmFwaC1oZWFkbGluZXsKICAgIGRpc3BsYXk6ZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Cn0KLnNlbGVjdGlvbi10YWJ7CiAgICBtaW4taGVpZ2h0OjgwcHg7CiAgICBoZWlnaHQ6MTAlOwogICAgYmFja2dyb3VuZDojMzkzOTM5YzA7CiAgICBib3JkZXItcmFkaXVzOjVweDsKfQouYm9yb3VnaC1idXR0b257CiAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgIHRvcDozcmVtOwogICAgbGVmdDoxcmVtOwp9Ci50aXRsZS1saW5lewogICAgZGlzcGxheTpmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgIGp1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuOwogICAgcG9zaXRpb246YWJzb2x1dGU7CiAgICB3aWR0aDoxMDAlOwogICAgdG9wOjFyZW07Cn0KLnRhYnsKICAgIG1pbi13aWR0aDo0MDBweDsKICAgIG1pbi1oZWlnaHQ6NzUwcHg7CiAgICB3aWR0aDozMHZ3OwogICAgaGVpZ2h0Ojg1dmg7CiAgICB6LWluZGV4Ojg7CiAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgIHRvcDozcmVtOwp9Ci5idXR0b257CiAgICBkaXNwbGF5OmZsZXg7CiAgICBnYXA6MCAwLjVyZW07Cn0KLmJ1dHRvbiBpbnB1dHsKICAgIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7CiAgICBwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50OwogICAgaGVpZ2h0OiAxcHg7CiAgICB3aWR0aDogMXB4OwogICAgb3ZlcmZsb3c6aGlkZGVuOwp9Ci5idXR0b24gbGFiZWx7CiAgICBvcGFjaXR5OjAuODsKICAgIGxpbmUtaGVpZ2h0OjE7CiAgICB0ZXh0LWFsaWduOmNlbnRlcjsKICAgIHBhZGRpbmc6MC41cmVtIDAuNXJlbTsKICAgIGJvcmRlcjojN2Y3ZjdmOTMgc29saWQgMXB4OwogICAgYm9yZGVyLXJhZGl1czo0cHg7CiAgICBjdXJzb3I6cG9pbnRlcjsKfQouYnV0dG9uIGlucHV0OmNoZWNrZWQgKyBsYWJlbCB7CiAgICBib3JkZXI6ICM2NmM3ZmYgc29saWQgMS41cHg7CiAgICBjb2xvcjojRjFGNUZCOwogICAgZm9udC13ZWlnaHQ6NjAwOwogICAgb3BhY2l0eToxOwp9CmhyewogICAgYm9yZGVyOjAuNXB4ICNGMUY1RkIgc29saWQ7CiAgICBvcGFjaXR5OjAuMjsKICAgIGRpc3BsYXk6YmxvY2s7CiAgICBsaW5lLWhlaWdodDowLjU7CiAgICBtYXJnaW46MC4ycmVtIDAgOwogICAgcGFkZGluZzowOwp9Ci5hbmFseXNpcy10YWJ7CiAgICBwYWRkaW5nOjFyZW0gMXJlbTsKICAgIG1hcmdpbi10b3A6MC4zcmVtOwogICAgbWluLWhlaWdodDo1NjBweDsKICAgIGhlaWdodDo3MCU7CiAgICBiYWNrZ3JvdW5kOiMzOTM5MzljMDsKICAgIGJvcmRlci1yYWRpdXM6NXB4Owp9Ci5ib3JvdWdoLWluZm8tdGl0bGV7CiAgICBkaXNwbGF5OmZsZXg7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjsKfQoucHJlY2luY3Qtc3VtbWFyeXsKICAgIGRpc3BsYXk6ZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7Cn0KLnN1Yi1zZWN0aW9uewogICAgZGlzcGxheTpmbGV4OwogICAgZmxleC1kaXJlY3Rpb246Y29sdW1uOwogICAgd2lkdGg6MTAwJTsKfQouY29zdC1kaXN0ewogICAgZGlzcGxheTpmbGV4OwogICAgZmxleC1kaXJlY3Rpb246cm93OwogICAgd2lkdGg6MTAwJTsKICAgIGhlaWdodDoyNSU7CiAgICBtaW4taGVpZ2h0OjE1NXB4OwogICAgbWFyZ2luLXRvcDouNXJlbTsKICAgIC8qIGJvcmRlcjpzb2xpZCByZWQgMXB4OyAqLwp9Ci52c0NvbXBhcmlzb257CiAgICBtYXJnaW4tdG9wOi41cmVtOwogICAgcGFkZGluZzowOwogICAgd2lkdGg6MTAwJTsKICAgIGhlaWdodDoyMCU7CiAgICBtaW4taGVpZ2h0Ojg1cHg7CiAgICBkaXNwbGF5OmZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjpyb3c7Cn0KCi5iYXItZ3JhcGgtY29udGFpbmVyewoKICAgIGhlaWdodDoxMDAlOwogICAgd2lkdGg6MTAwJTsKICAgIGRpc3BsYXk6ZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOmNvbHVtbjsKICAgIGp1c3RpZnktY29udGVudDpzcGFjZS1ldmVubHk7CiAgICBnYXA6MC41cmVtOwp9Ci5iYXItYm94ewoKICAgIGhlaWdodDo3MCU7CiAgICBkaXNwbGF5OmZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjpyb3c7CiAgICBnYXA6MXJlbTsKfQoKLmJhci1ncmFwaHsKICAgIHRyYW5zZm9ybS1vcmlnaW46dG9wOwogICAgdHJhbnNpdGlvbjpoZWlnaHQgMnM7CiAgICB3aWR0aDoxNXB4OwogICAgei1pbmRleDozOwp9Ci5iYXItZ3JhcGg6aG92ZXJ7CiAgICBib3JkZXI6c29saWQgMXB4ICNmMWY1ZmI4MzsKfQoudG9vbHRpcHsKICAgIHBhZGRpbmc6MC4zcmVtOwogICAgcG9zaXRpb246YWJzb2x1dGU7CiAgICB0cmFuc2Zvcm06dHJhbnNsYXRlKDI1JSwzNSUpOwogICAgYmFja2dyb3VuZC1jb2xvcjojRjFGNUZCOwogICAgZGlzcGxheTpibG9jazsKICAgIHdpZHRoOjVyZW07CiAgICBoZWlnaHQ6M3JlbTsKICAgIGJvcmRlci1yYWRpdXM6MnB4OwogICAgYm94LXNoYWRvdzoxcHggMXB4IDNweCAjMWExYTFhNjM7CiAgICB6LWluZGV4OjUKfQoK"},{"version":3,"sources":["/Users/soonkpaik/Desktop/NYC Project/code/src/components/BoroughAnalysis.vue"],"names":[],"mappings":"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","file":"/Users/soonkpaik/Desktop/NYC Project/code/src/components/BoroughAnalysis.vue","sourceRoot":"","sourcesContent":["<template>\n\n        \n    <teleport to='body'>\n      <div class='tab'> \n          <div class=\"selection-tab\">\n              <div class='title-line white-text'>\n                  <div style ='margin-left:1rem' class='bold'>Borough Selection</div>\n                  <switch-form\n                  style='margin-right:1rem'\n                  :options='options'\n                  smallSelection=true>\n                  </switch-form>\n              </div>\n              <div class='borough-button'>\n                  <form class='form'>\n                      <div class=\"white-text light button\">\n                          <input type='radio' id='radio-one' name='button-one' value='Brooklyn'\n                          v-model='selectedCounty' />\n                          <label for='radio-one'>Brooklyn</label>\n\n                          <input type='radio' id='radio-two' name='button-two' value='Queens'\n                          v-model='selectedCounty' />\n                          <label for='radio-two'>Queens</label>\n\n                          <input type='radio' id='radio-three' name='button-three' value='Manhattan'\n                          v-model='selectedCounty' />\n                          <label for='radio-three'>Manhattan</label>\n\n                          <input type='radio' id='radio-four' name='button-four' value='Bronx'\n                          v-model='selectedCounty' />\n                          <label for='radio-four'>Bronx</label>\n                      </div>\n                  </form>\n              </div>\n          </div>\n\n        <div class='analysis-tab'>\n            <div class='borough-info-title blue-text small-text'>\n                <div>{{county}}</div>\n                <div>{{yearSelected}}</div>\n            </div>\n            <hr>\n            <div class='precinct-summary' v-if='selectedPrecinct'>\n                <div class='sub-section'>\n                    <div class='white-text medium'>{{selectedPrecinct}} Precinct</div>\n                    <div class='summary-stats orange-text super-big-text'>\n                        <div class='medium-big-text bold'>{{precinctTicket}} <span class='white-text medium-text medium'>Tickets</span> </div>\n                        <div class='medium-big-text bold'>{{precinctCostSum}} <span class='white-text medium-text medium'>USD</span> </div>\n                    </div>\n                </div>\n\n                <div class='sub-section'>\n                    <div class='white-text medium'>Borough Avg.</div>\n                    <div class='summary-stats orange-text super-big-text'>\n                        <div class='medium-big-text bold'>{{countyTicketAverage}} <span class='white-text medium-text medium'>Tickets</span> </div>\n                        <div class='medium-big-text bold'>{{countyCostAverage}} <span class='white-text medium-text medium'>USD</span> </div>\n                    </div>\n                </div>\n\n\n            </div>\n            <hr>\n            <div class='white-text medium-text medium graph-headline'>\n                <div>Parking Cost Distribution</div>\n                <div>legend sace</div>\n            </div>\n            <div class=\"cost-dist\" ref='lineGraphContainer'>\n                <line-graph class='graphcontainer'\n                :width='width'\n                :height='lineGraphheight'\n                :margin='margin'\n                :dataGroup='dataGroup'\n                :xAxisName='xAxisName'\n                :yAxisName='yAxisName'\n                :lineColors='lineColors'\n                ></line-graph>\n            </div>\n            <div class='white-text medium-text medium graph-headline'>\n                <div>Precinct vs Borough</div>\n            </div>\n            <div class='vsComparison'>\n                <div class='bar-graph-container'\n                v-for='(bargroup,index) in comparisonData' \n                :key='index'>\n                    <div class='bar-box' ref='barBox'>\n\n                        <div class='bar-graph orange' \n                        @mouseover='showBarTooltip(\"precinct\",index)'\n                        @mouseleave='hidBarTooltip()'\n                        :style=\"{height:bargroup.values.precinct+'px',\n                        transform:heightTranslate()\n                        }\">\n                        </div>\n                        <div class='tooltip' v-if='tooltipToShow==\"precinct\" && index==hoveredIndex'>\n                            <div>Precinct:</div>\n                            <div>{{  Math.round(bargroup.actualValues.precinct*10)/10 }}</div>\n                            </div>\n                        \n                        <div class='bar-graph blue' \n                        @mouseover='showBarTooltip(\"county\",index)'\n                        @mouseleave='hidBarTooltip()'\n                        :style=\"{height:bargroup.values.county+'px',\n                        transform:heightTranslate()\n                        }\">\n                        </div>\n                        <div style='transform:translate(55%,35%)' class='tooltip' v-if='tooltipToShow==\"county\" && index==hoveredIndex'>\n                            <div>County:</div>\n                            <div>{{  Math.round(bargroup.actualValues.county*100)/100 }}</div>\n                            </div>\n                    \n                    </div>\n                    <div class='bar-description white-text small-text light'>\n                        {{bargroup.category}}\n                    </div>\n                </div>\n            </div>\n        </div>\n          \n\n      </div>  \n    </teleport>\n\n</template>\n<script>\n\nexport default {\n    data(){\n        return{\n            targetPrecinctData:undefined,\n            options:['on','off'],\n            selectedCounty:'Brooklyn',\n            geoJson:undefined,\n            loading:true,\n            dataGroup:[],\n            width:0,\n            lineGraphheight:0,\n            xAxisName:undefined,\n            yAxisName:undefined,\n            margin:{vertical:undefined,horizontal:undefined},\n            countyPrecinctCount:undefined,\n            lineColors:['#F78F67','#66C7FF'],\n            maxCosts:[],\n            numberOfstep:10,\n            comparisonData:[\n                {category:'Average Cost',values:{precinct:0,county:0},\n                actualValues:{precinct:0,county:0}\n                },\n                {category:'Number of Tickets',values:{precinct:0,county:0},\n                actualValues:{precinct:0,county:0}\n                },\n                {category:'Frequency per Plate',values:{precinct:0,county:0},\n                actualValues:{precinct:0,county:0}\n                },\n            ],\n            domainSize:0,\n            bargroupHovered:false,\n            tooltipToShow:undefined,\n            hoveredIndex:undefined\n        }\n    },\n    props:['selectedPrecinct'],\n    computed:{\n\n    monthlyData(){\n        var monthlyDataArr =[];\n        this.countyPrecinctCount;\n\n        for(let i=0;i<12;i++){\n\n        const targetCases=this.targetPrecinctData.filter(\n                (d)=>{\n                    var date = new Date(d['Issue Date']);\n                    var dateNum= date.getMonth();\n                    return dateNum==i\n                    }\n                ).length\n\n        const targetCountyCases = this.targetCountyData.filter(\n                (d)=>{\n                    var date = new Date(d['Issue Date']);\n                    var dateNum= date.getMonth();\n                    return dateNum==i\n                    }).length;\n        \n\n            monthlyDataArr.push(\n                {month:i,precinct:targetCases,county:targetCountyCases/this.countyPrecinctCount}\n            )\n        }\n        return monthlyDataArr\n    },\n\n      countyTicketFrequency(){\n      const plates = [...new Set(this.targetCountyData.map(d=>d['Plate']))].length;\n      const perPlate =this.countyTicketCountSum/plates;\n      return perPlate\n      },\n      precinctTicketFrequency(){\n        const uniquePlateCount= [...new Set(this.targetYearData.filter(d=>d['Precinct']==this.selectedPrecinct).map(d=>d['Plate']))].length\n        const perPlate = this.precinctTicket/uniquePlateCount;\n        return perPlate\n      },\n\n      targetYearData(){\n      return this.$store.getters['ByTicketData/targetYearData'];\n      },\n      yearSelected(){\n      return this.$store.getters.yearSelected;\n      },\n      county(){\n          return this.$store.getters.boroughSelected;\n      },\n      ticketArr(){\n\n        return this.targetYearData.filter(d=>d['Precinct']==this.selectedPrecinct).length\n      },\n      countyTicketCountSum(){\n\n        var initial = this.selectedCounty=='Manhattan'? 'MN':\n                      this.selectedCounty=='Queens'? 'QN':\n                      this.selectedCounty=='Bronx'? 'BX':\n                      this.selectedCounty=='Brooklyn'? 'BK':'unknown'\n\n        return  this.targetYearData.filter(d=>d['County']==initial).length\n      },\n      precinctTicket(){\n\n        return this.targetYearData.filter(d=>d['Precinct']==this.selectedPrecinct).length\n      },\n      precinctCostSum(){\n          return this.$store.getters['ByTicketData/precinctCost']\n      },\n      countyTicketAverage(){\n\n        var initial = this.selectedCounty=='Manhattan'? 'MN':\n                      this.selectedCounty=='Queens'? 'QN':\n                      this.selectedCounty=='Bronx'? 'BX':\n                      this.selectedCounty=='Brooklyn'? 'BK':'unknown'\n\n          const numberofPrecinctInCounty =[... new Set(this.targetYearData.filter(d=>d['County']==initial).map(d=>d['Precinct']))].length\n\n          const ticketSum = this.countyTicketCountSum;\n          const avg = Math.round(ticketSum*10/numberofPrecinctInCounty)/10;\n          return avg;\n      },\n      countyCostAverage(){\n          return this.$store.getters['ByTicketData/boroughAvgCost']\n      },\n      targetCountyData(){return this.$store.getters['ByTicketData/selectedBoroughData']},\n      maxCost(){ return Math.max(...this.maxCosts)},\n    },\n    async mounted(){\n\n        this.emitLoad()\n        this.geoJson=this.$store.getters['ByGeoData/precinctGeoJson'];\n        this.selectedCounty=this.county;\n        this.setSVGWidthHeight()\n\n        if(this.selectedPrecinct){\n        this.$store.dispatch('ByTicketData/setTargetPrecinct',this.selectedPrecinct)\n        }\n\n        this.changeLoad()\n        this.emitLoad()\n    },\n    watch:{\n        selectedCounty:function(val){\n            this.$store.dispatch('boroughChange',val)\n            // by_borough\n            if(this.$route.path.includes('by_borough')){\n                this.$router.push(`${val}`)\n            }\n        },\n        selectedPrecinct:function(val){\n            this.$store.dispatch('ByTicketData/setTargetPrecinct',val)\n            this.getMaxCost()\n\n        /*createPrecinctGraphDataSet & createCountyGraphDataset \n        fill up dataGroup. so it has to be renewed in \n        every selection*/\n\n            this.dataGroup=[];\n            this.createPrecinctGraphDataSet()\n            this.createCountyGraphDataSet()\n            this.barUpdate()\n        }\n    },\n    methods:{\n        showBarTooltip(target,index){\n            this.tooltipToShow=target\n            this.hoveredIndex=index\n        },\n        hidBarTooltip(){\n            this.tooltipToShow=undefined\n            this.hoveredIndex=undefined\n        },\n        heightTranslate(){\n            return `translateY(${this.domainSize}px) rotate(180deg)`\n        },\n\n        barUpdate(){\n            // Cost calculation\n            this.domainSize = this.$refs.barBox.clientHeight;\n\n            const fullScale1=Math.max(this.countyCostAverage,this.precinctCostSum);\n\n            this.comparisonData[0].values.precinct=(this.precinctCostSum/fullScale1)*this.domainSize\n            this.comparisonData[0].values.county=(this.countyCostAverage/fullScale1)*this.domainSize\n            this.comparisonData[0].actualValues.precinct=this.precinctCostSum\n            this.comparisonData[0].actualValues.county=this.countyCostAverage\n\n            // Ticket calculation\n            const fullScale2=Math.max(this.countyTicketAverage,this.precinctTicket);\n            this.comparisonData[1].values.precinct=(this.precinctTicket/fullScale2)*this.domainSize\n            this.comparisonData[1].values.county=(this.countyTicketAverage/fullScale2)*this.domainSize\n            this.comparisonData[1].actualValues.precinct=this.precinctTicket\n            this.comparisonData[1].actualValues.county=this.countyTicketAverage\n\n\n            // Frequency calcuation\n            const fullScale3 = Math.max(this.countyTicketFrequency,this.precinctTicketFrequency);\n            this.comparisonData[2].values.precinct=(this.precinctTicketFrequency/fullScale3)*this.domainSize\n            this.comparisonData[2].values.county=(this.countyTicketFrequency/fullScale3)*this.domainSize\n            this.comparisonData[2].actualValues.precinct=this.precinctTicketFrequency\n            this.comparisonData[2].actualValues.county=this.countyTicketFrequency\n\n        },\n        emitLoad(){\n            this.$emit('loadingStatus',this.loading)\n        },\n        changeLoad(){\n            this.loading=false\n        },\n        setSVGWidthHeight(){\n            this.width=this.$refs.lineGraphContainer.clientWidth;\n            this.lineGraphheight=this.$refs.lineGraphContainer.clientHeight;\n            this.margin.vertical=this.lineGraphheight*0.1;\n            this.margin.horizontal=this.width*0.05;\n\n\n        },\n        getMaxCost(){\n        this.maxCosts =[];\n        \n        const targetPrecinctArr=this.targetYearData.filter(d=>d['Precinct']==this.selectedPrecinct);\n        this.targetPrecinctData=targetPrecinctArr\n        var costByPlatePrecinct =[];\n        var platesPrecinct = [...new Set(targetPrecinctArr.map(d=>d['Plate']))];\n        platesPrecinct.forEach((d)=>{\n            var eachPlate = targetPrecinctArr.filter(t=>t['Plate']==d);\n            var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                return {\n                    plateNumber:d,\n                    costSum:a.costSum + b['Payment Amount']\n                    }\n            },{plateNumber:d,costSum:0});\n            costByPlatePrecinct.push(eachPlateCostSum)\n        });\n\n        var costsumsPrecinct = costByPlatePrecinct.map(d=>d.costSum);\n        var maxCostPrecinct = Math.max(...costsumsPrecinct)\n        this.maxCosts.push(maxCostPrecinct);\n\n        this.countyPrecinctCount = [...new Set(this.targetCountyData.map(d=>d['Precinct']))].length;\n        var costByPlateCounty=[];\n        var platesCounty = [... new Set(this.targetCountyData.map(d=>d['Plate']))];\n\n        platesCounty.forEach((d)=>{\n        \n                       var eachPlate = this.targetCountyData.filter(t=>t['Plate']==d);\n\n                       var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                           return {\n                               plateNumber:d,\n                               costSum:a.costSum + b['Payment Amount']\n                               }\n                       },{plateNumber:d,costSum:0});\n\n\n                       costByPlateCounty.push(eachPlateCostSum)\n\n\n                   });\n        \n        var costsumsCounty = costByPlateCounty.map(d=>d.costSum);\n        var maxCostCounty = Math.max(...costsumsCounty)\n        this.maxCosts.push(maxCostCounty);\n\n        },\n\n\n        createPrecinctGraphDataSet(){\n            const targetPrecinctArr=this.targetYearData.filter(d=>d['Precinct']==this.selectedPrecinct);\n\n            var costByPlatePrecinct =[];\n            var platesPrecinct = [...new Set(targetPrecinctArr.map(d=>d['Plate']))];\n            \n            platesPrecinct.forEach((d)=>{\n\n                var eachPlate = targetPrecinctArr.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n                costByPlatePrecinct.push(eachPlateCostSum)\n\n            });\n\n            var finalArr =[];\n            var stepSize = this.maxCost/this.numberOfstep;\n\n            for(let i=0;i<this.numberOfstep;i++){\n                var count =0;\n                var paymentTop = stepSize*(i+1);\n                var paymentBottom =stepSize*(i);\n                costByPlatePrecinct.forEach((t)=>{\n                    if(i==0){\n                        if(t.costSum>=paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }else{\n                        if(t.costSum>paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }\n                })\n                finalArr.push({\n                    costWidth:paymentTop,\n                    cases:count\n                });\n            }\n            this.dataGroup.push(finalArr)\n\n        },\n        createCountyGraphDataSet(){\n\n            var costByPlateCounty=[];\n            var plates = this.targetCountyData.map(d=>d['Plate']);\n            var uniquePlates = [... new Set(plates)];\n\n            uniquePlates.forEach((d)=>{\n\n                var eachPlate = this.targetCountyData.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n\n                costByPlateCounty.push(eachPlateCostSum)\n\n            });\n\n\n            var finalArr =[];\n            var stepSize = this.maxCost/this.numberOfstep;\n\n\n            for(let i=0;i<this.numberOfstep;i++){\n                var count =0;\n                var paymentTop = stepSize*(i+1);\n                var paymentBottom =stepSize*(i);\n                costByPlateCounty.forEach((t)=>{\n                    if(i==0){\n                        if(t.costSum>=paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }else{\n                        if(t.costSum>paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }\n                })\n                finalArr.push({\n                    costWidth:paymentTop,\n                    cases:count/this.countyPrecinctCount\n                });\n            }\n            this.dataGroup.push(finalArr)\n            this.xAxisName=Object.keys(finalArr[0])[0]\n            this.yAxisName=Object.keys(finalArr[0])[1]\n        }\n   \n\n    }\n}\n</script>\n<style scoped>\n.graph-headline{\n    display:flex;\n    flex-direction: row;\n    justify-content: space-between;\n}\n.selection-tab{\n    min-height:80px;\n    height:10%;\n    background:#393939c0;\n    border-radius:5px;\n}\n.borough-button{\n    position:absolute;\n    top:3rem;\n    left:1rem;\n}\n.title-line{\n    display:flex;\n    flex-direction: row;\n    justify-content:space-between;\n    position:absolute;\n    width:100%;\n    top:1rem;\n}\n.tab{\n    min-width:400px;\n    min-height:750px;\n    width:30vw;\n    height:85vh;\n    z-index:8;\n    position:absolute;\n    top:3rem;\n}\n.button{\n    display:flex;\n    gap:0 0.5rem;\n}\n.button input{\n    clip: rect(0, 0, 0, 0);\n    position:absolute !important;\n    height: 1px;\n    width: 1px;\n    overflow:hidden;\n}\n.button label{\n    opacity:0.8;\n    line-height:1;\n    text-align:center;\n    padding:0.5rem 0.5rem;\n    border:#7f7f7f93 solid 1px;\n    border-radius:4px;\n    cursor:pointer;\n}\n.button input:checked + label {\n    border: #66c7ff solid 1.5px;\n    color:#F1F5FB;\n    font-weight:600;\n    opacity:1;\n}\nhr{\n    border:0.5px #F1F5FB solid;\n    opacity:0.2;\n    display:block;\n    line-height:0.5;\n    margin:0.2rem 0 ;\n    padding:0;\n}\n.analysis-tab{\n    padding:1rem 1rem;\n    margin-top:0.3rem;\n    min-height:560px;\n    height:70%;\n    background:#393939c0;\n    border-radius:5px;\n}\n.borough-info-title{\n    display:flex;\n    justify-content:space-between;\n}\n.precinct-summary{\n    display:flex;\n    flex-direction: row;\n}\n.sub-section{\n    display:flex;\n    flex-direction:column;\n    width:100%;\n}\n.cost-dist{\n    display:flex;\n    flex-direction:row;\n    width:100%;\n    height:25%;\n    min-height:155px;\n    margin-top:.5rem;\n    /* border:solid red 1px; */\n}\n.vsComparison{\n    margin-top:.5rem;\n    padding:0;\n    width:100%;\n    height:20%;\n    min-height:85px;\n    display:flex;\n    flex-direction:row;\n}\n\n.bar-graph-container{\n\n    height:100%;\n    width:100%;\n    display:flex;\n    flex-direction:column;\n    justify-content:space-evenly;\n    gap:0.5rem;\n}\n.bar-box{\n\n    height:70%;\n    display:flex;\n    flex-direction:row;\n    gap:1rem;\n}\n\n.bar-graph{\n    transform-origin:top;\n    transition:height 2s;\n    width:15px;\n    z-index:3;\n}\n.bar-graph:hover{\n    border:solid 1px #f1f5fb83;\n}\n.tooltip{\n    padding:0.3rem;\n    position:absolute;\n    transform:translate(25%,35%);\n    background-color:#F1F5FB;\n    display:block;\n    width:5rem;\n    height:3rem;\n    border-radius:2px;\n    box-shadow:1px 1px 3px #1a1a1a63;\n    z-index:5\n}\n\n</style>\n"]}]}