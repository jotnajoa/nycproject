{"remainingRequest":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/babel-loader/lib/index.js!/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/soonkpaik/Desktop/NYC Project/code/src/views/YearView.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/soonkpaik/Desktop/NYC Project/code/src/views/YearView.vue","mtime":1624553909718},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/soonkpaik/Desktop/NYC Project/code/src/views/YearView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>This is Year View</div>\n<div class='graphcontainer' ref='graphcontainer'\n>\n\n<line-graph class='graphcontainer'\n:width='width'\n:height='height'\n:margin='margin'\n:dataGroup='dataGroup'\n:xAxisName='xAxisName'\n:yAxisName='yAxisName'\n:lineColors='lineColors'\n></line-graph>\n</div>\n</template>\n<script>\nexport default {\n\n    data(){\n        return{\n            rawData:undefined,\n            // targetYearData in boroughAnalysis case\n            dataGroup:[],\n\n            width:0,\n            height:0,\n            numberOfstep:10,\n            xAxisName:undefined,\n            yAxisName:undefined,\n            margin:{vertical:undefined,horizontal:undefined},\n            selectedCounty:undefined,\n            countyPrecinctCount:undefined,\n            lineColors:['#F78F67','#66C7FF'],\n            selectedPrecinct:undefined,\n            maxCosts:[]\n            // 여기있는 selectedCounty는 나중에 합칠 때 지운다!!!!!!\n        }\n    },\n    async mounted(){\n        this.selectedCounty=this.$store.getters.boroughSelected;\n        await this.$store.dispatch('ByTicketData/loadYearData');\n        this.rawData= this.$store.getters['ByTicketData/targetYearData']\n        this.getMaxCost()\n        // 이거 나중에  68이 아니라 진짜 받아서 넣어야한다!!!\n        this.$store.dispatch('ByTicketData/setTargetPrecinct',68);\n        this.selectedPrecinct=this.$store.getters['ByTicketData/targetPrecinct']\n        this.createCountyGraphDataSet(this.rawData);\n        this.createPrecinctGraphDataSet()\n        this.getWidthHeight();\n    },\n    computed:{\n        targetCountyData(){return this.$store.getters['ByTicketData/selectedBoroughData']},\n        maxCost(){\n            return Math.max(...this.maxCosts)\n        }\n    },\n    methods:{\n        getMaxCost(){\n            // Precinct Max Value\n            const targetPrecinctArr=this.rawData.filter(d=>d['Precinct']==this.selectedPrecinct);\n\n            var costByPlatePrecinct =[];\n            var platesPrecinct = [...new Set(targetPrecinctArr.map(d=>d['Plate']))];\n            \n            platesPrecinct.forEach((d)=>{\n\n                var eachPlate = targetPrecinctArr.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n                costByPlatePrecinct.push(eachPlateCostSum)\n\n            });\n\n            var costsumsPrecinct = costByPlatePrecinct.map(d=>d.costSum);\n            var maxCostPrecinct = Math.max(...costsumsPrecinct)\n            this.maxCosts.push(maxCostPrecinct);\n\n            // County Max Value\n\n\n            this.countyPrecinctCount = [...new Set(this.targetCountyData.map(d=>d['Precinct']))].length;\n\n\n            var costByPlateCounty=[];\n            var platesCounty = [... new Set(this.targetCountyData.map(d=>d['Plate']))];\n\n            platesCounty.forEach((d)=>{\n\n                var eachPlate = this.targetCountyData.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n\n                costByPlateCounty.push(eachPlateCostSum)\n\n\n            });\n\n            var costsumsCounty = costByPlateCounty.map(d=>d.costSum);\n            var maxCostCounty = Math.max(...costsumsCounty)\n            this.maxCosts.push(maxCostCounty);\n\n        },\n\n        createPrecinctGraphDataSet(){\n            const targetPrecinctArr=this.rawData.filter(d=>d['Precinct']==this.selectedPrecinct);\n\n            var costByPlatePrecinct =[];\n            var platesPrecinct = [...new Set(targetPrecinctArr.map(d=>d['Plate']))];\n            \n            platesPrecinct.forEach((d)=>{\n\n                var eachPlate = targetPrecinctArr.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n                costByPlatePrecinct.push(eachPlateCostSum)\n\n            });\n\n            var finalArr =[];\n            var stepSize = this.maxCost/this.numberOfstep;\n\n            for(let i=0;i<this.numberOfstep;i++){\n                var count =0;\n                var paymentTop = stepSize*(i+1);\n                var paymentBottom =stepSize*(i);\n                costByPlatePrecinct.forEach((t)=>{\n                    if(i==0){\n                        if(t.costSum>=paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }else{\n                        if(t.costSum>paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }\n                })\n                finalArr.push({\n                    costWidth:paymentTop,\n                    cases:count\n                });\n            }\n            this.dataGroup.push(finalArr)\n\n        },\n        getWidthHeight(){\n            this.width=this.$refs.graphcontainer.clientWidth;\n            this.height=this.$refs.graphcontainer.clientHeight;\n            console.log(this.width,this.height)\n            this.margin.vertical=this.height*0.1;\n            this.margin.horizontal=this.width*0.05;\n            console.log(this.margin)\n        },\n        createCountyGraphDataSet(){\n\n            this.countyPrecinctCount = [...new Set(this.targetCountyData.map(d=>d['Precinct']))].length;\n\n\n            var costByPlateCounty=[];\n            var plates = this.targetCountyData.map(d=>d['Plate']);\n            var uniquePlates = [... new Set(plates)];\n\n            uniquePlates.forEach((d)=>{\n\n                var eachPlate = this.targetCountyData.filter(t=>t['Plate']==d);\n\n                var eachPlateCostSum= eachPlate.reduce((a,b)=>{\n                    return {\n                        plateNumber:d,\n                        costSum:a.costSum + b['Payment Amount']\n                        }\n                },{plateNumber:d,costSum:0});\n\n\n                costByPlateCounty.push(eachPlateCostSum)\n\n\n            });\n\n\n            var finalArr =[];\n            var stepSize = this.maxCost/this.numberOfstep;\n\n\n            for(let i=0;i<this.numberOfstep;i++){\n                var count =0;\n                var paymentTop = stepSize*(i+1);\n                var paymentBottom =stepSize*(i);\n                costByPlateCounty.forEach((t)=>{\n                    if(i==0){\n                        if(t.costSum>=paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }else{\n                        if(t.costSum>paymentBottom && t.costSum<=paymentTop){\n                            count++\n                        }else{null}\n                    }\n                })\n                finalArr.push({\n                    costWidth:paymentTop,\n                    cases:count/this.countyPrecinctCount\n                });\n            }\n            this.dataGroup.push(finalArr)\n            this.xAxisName=Object.keys(finalArr[0])[0]\n            this.yAxisName=Object.keys(finalArr[0])[1]\n         \n        }\n    }\n}\n</script>\n<style scoped>\n.graphcontainer{\n    width:500px;\n    height:500px;\n}\n</style>"],"sourceRoot":""}]}