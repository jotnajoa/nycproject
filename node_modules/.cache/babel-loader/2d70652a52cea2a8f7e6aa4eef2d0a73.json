{"remainingRequest":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/babel-loader/lib/index.js!/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/soonkpaik/Desktop/NYC Project/code/src/views/BoroughView.vue?vue&type=template&id=658446f2&scoped=true","dependencies":[{"path":"/Users/soonkpaik/Desktop/NYC Project/code/src/views/BoroughView.vue","mtime":1624586494454},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/soonkpaik/Desktop/NYC Project/code/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHdpdGhDdHggYXMgX3dpdGhDdHgsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHdpdGhTY29wZUlkIGFzIF93aXRoU2NvcGVJZCwgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aElkID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZCgiZGF0YS12LTY1ODQ0NmYyIik7CgpfcHVzaFNjb3BlSWQoImRhdGEtdi02NTg0NDZmMiIpOwoKdmFyIF9ob2lzdGVkXzEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgaWQ6ICJtYXAiCn0sIG51bGwsIC0xCi8qIEhPSVNURUQgKi8KKTsKCl9wb3BTY29wZUlkKCk7CgpleHBvcnQgdmFyIHJlbmRlciA9IC8qI19fUFVSRV9fKi9fd2l0aElkKGZ1bmN0aW9uIChfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9ib3JvdWdoX2FuYWx5c2lzID0gX3Jlc29sdmVDb21wb25lbnQoImJvcm91Z2gtYW5hbHlzaXMiKTsKCiAgdmFyIF9jb21wb25lbnRfbG9hZGluZ19zcGlubmVyID0gX3Jlc29sdmVDb21wb25lbnQoImxvYWRpbmctc3Bpbm5lciIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBbX2hvaXN0ZWRfMSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfYm9yb3VnaF9hbmFseXNpcywgewogICAgc2VsZWN0ZWRQcmVjaW5jdDogJGRhdGEuc2VsZWN0ZWRQcmVjaW5jdAogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJzZWxlY3RlZFByZWNpbmN0Il0pLCAkZGF0YS5pc0xvYWRpbmcgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9sb2FkaW5nX3NwaW5uZXIsIHsKICAgIGtleTogMCwKICAgIG9uTG9hZGluZ1N0YXR1czogX2N0eC5zdWJsb2FkaW5nCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhJZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBbX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLmlzTG9hZGluZyksIDEKICAgICAgLyogVEVYVCAqLwogICAgICApXTsKICAgIH0pLAogICAgXzogMQogICAgLyogU1RBQkxFICovCgogIH0sIDgKICAvKiBQUk9QUyAqLwogICwgWyJvbkxvYWRpbmdTdGF0dXMiXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSwgNjQKICAvKiBTVEFCTEVfRlJBR01FTlQgKi8KICApOwp9KTs="},{"version":3,"sources":["/Users/soonkpaik/Desktop/NYC Project/code/src/views/BoroughView.vue"],"names":[],"mappings":";;;;;;8BAEM,YAAA,CAEM,KAFN,EAEM;AAFD,EAAA,EAAE,EAAC;AAEF,CAFN,EAAa,IAAb,EAAa,CAAA;AAAA;AAAb,C;;;;;;;;;sDAAA,U,EAGA,YAAA,CAGoB,2BAHpB,EAGoB;AAFnB,IAAA,gBAAgB,EAAE,KAAA,CAAA;AAEC,GAHpB,EACmC,IADnC,EACmC;AAAA;AADnC,IACmC,CAAA,kBAAA,CADnC,C,EAKqB,KAAA,CAAA,S,kBAAvB,YAAA,CAEkB,0BAFlB,EAEkB;UAAA;AAFiB,IAAA,eAAa,EAAE,IAAA,CAAA;AAEhC,GAFlB,E;qBACA;AAAA,aAAa,C,kCAAX,KAAA,CAAA,S,GAAS;AAAA;OAAE,CAAb;AAAA,K;;;;GADA,E;;AAAA,I,mBAAA,C","sourcesContent":["<template>\n\n      <div id=\"map\">\n\n      </div>\n      <borough-analysis\n      :selectedPrecinct='selectedPrecinct'\n      \n      ></borough-analysis>\n\n    <loading-spinner v-if='isLoading' @loadingStatus='subloading'>\n    {{isLoading}}\n    </loading-spinner>\n\n\n\n</template>\n<script>\nvar map; \nconsole.log(map)\n\nimport mapboxgl from 'mapbox-gl'\nexport default {\n  props:['county'],\n  data(){\n    return{\n      isLoading:true,\n      accessToken:'pk.eyJ1Ijoiam90bmFqb2EiLCJhIjoiY2tibnV5bmx0MGF5eTJxcG40NXpvOXB6eCJ9.__awhLNPyWEzCNoGzsM3Pw',\n      mapStyle:'mapbox://styles/jotnajoa/ckpn6ifdg06ta17qk4t95welg/draft',\n      zoomLevel:11,\n      viewOrigin:undefined,\n      maploaded:false,\n      precinctGeoJson:undefined,\n      selectedPrecinct:undefined,\n      isCounty:undefined,\n      isHoverPrecinct:undefined,\n      isNotHoverPrecinct:undefined,\n      contourGeoJson:undefined,\n      isClickPrecinct:undefined,\n      isNotClickPrecinct:undefined,\n      pitch:50,\n      origins:{\n        Brooklyn:[-73.9754,40.6272],\n        Manhattan:[-73.9712,40.7831],\n        Queens:[-73.8737,40.6433],\n        Bronx:[-73.8648,40.8448],\n      },\n      hoverId:null,\n      frameCount:0,\n      lineAnimation:undefined,\n      contourLength:undefined,\n      contourCoordArr:undefined,\n      precinctHighlighted:false\n    }\n  },\n  methods:{\n    clearContour(){\n      if(map){\n        this.contourGeoJson={'type': 'FeatureCollection',\n        'features': [{\n          'type': 'Feature',\n          'geometry': {\n            'type': 'LineString',\n            'coordinates': [\n                []\n            ]\n        }\n        }]\n        }\n        map.getSource('contourline').setData(this.contourGeoJson)}\n    },\n    cursorPointer(){\n      map.getCanvas().style.cursor = 'pointer';\n\n    },\n    highlightPointer(e){\n        const targetPrecinct =e.features[0].properties.precinct;\n\n        this.isCounty=['==',['get','county'],this.selectedCounty];\n        this.isHoverPrecinct=['==',['get','precinct'],targetPrecinct];\n        this.isNotHoverPrecinct=['!=',['get','precinct'],targetPrecinct];\n\n        map.getCanvas().style.cursor = 'pointer';\n        if(e.features[0].properties.county==this.selectedCounty){\n          \n          map.setPaintProperty('precincts',\n          'fill-color',\n          ['case',\n\n          ['all', this.isNotHoverPrecinct, this.isCounty],\n          '#1A1A1A',\n\n          ['all', this.isHoverPrecinct,this.isCounty],\n          '#F78F67',\n          '#FFFFFF']\n          )\n\n          map.setPaintProperty('precincts',\n          'fill-opacity',\n          ['case',\n\n          ['all', this.isNotHoverPrecinct, this.isCounty],\n          0.5,\n\n          ['all', this.isHoverPrecinct, this.isCounty],\n          0.8,\n          0.8]\n          )\n          }\n    },\n    leavePointer(){\n        map.setPaintProperty('precincts','fill-color',['case',this.isCounty,\n            '#1A1A1A',\n            '#FFFFFF']\n        );\n        map.setPaintProperty('precincts','fill-opacity',['case',this.isCounty,\n            0.8,\n            0.8]\n        );\n    },\n    createLayer(){\n\n\n\n      map.addSource('precinct',{\n        type:'geojson',\n        data:this.precinctGeoJson\n      });\n\n      map.addSource('contourline',{\n        type:'geojson',\n        data:this.contourGeoJson\n      });\n\n      map.addLayer({\n        'id':'precincts',\n        'type':'fill',\n        'source':'precinct',\n        'paint':{\n          'fill-color':\n\n          ['case',this.isCounty,\n            '#1A1A1A',\n            '#FFFFFF'],\n\n          'fill-opacity':\n          ['case',this.isCounty,\n            0.5,\n            0.8\n          ],\n        }\n        });\n\n      map.addLayer({\n        'id':'contourlines',\n        'type':'line',\n        'source':'contourline',\n        'layout':{\n          'line-cap':'round',\n          'line-join':'round',\n        },\n        'paint':{\n          'line-color':'#F78F67',\n          'line-width':2.5,\n          'line-opacity':1\n        }\n        });\n\n\n      // function cursorPointer(){\n      //   map.getCanvas().style.cursor = 'pointer';\n      // }\n\n      map.on('mousemove','precincts',this.cursorPointer);\n      map.on('mousemove','precincts',this.highlightPointer);\n      map.on('mouseleave','precincts',this.leavePointer)\n\n      \n      map.on('click','precincts',(e)=>{\n        if(e.features[0].properties.county==this.selectedCounty){\n\n        // this.precinctHighlighted=true;\n        map.off('mousemove','precincts',this.cursorPointer);\n        map.off('mousemove','precincts',this.highlightPointer);\n        map.off('mouseleave','precincts',this.leavePointer);\n\n        this.selectedPrecinct =e.features[0].properties.precinct;\n\n\n        this.isNotHoverPrecinct=['!=',['get','precinct'],this.selectedPrecinct];\n        this.isHoverPrecinct=['==',['get','precinct'],this.selectedPrecinct];\n        this.isCounty=['==',['get','county'],this.selectedCounty];\n        this.isClickPrecinct = ['==',['get','precinct'],this.selectedPrecinct]\n        this.isNotClickPrecinct = ['!=',['get','precinct'],this.selectedPrecinct]\n\n        const pretarget =e.features[0].geometry.coordinates;\n        console.log('lets check pretarget- geometry',pretarget.geometry,\n        'lets check pretarget only',pretarget,'what about length only',pretarget.length\n        )\n        if(pretarget.length==1){\n          const targetData = pretarget[0]\n\n          this.contourCoordArr = targetData\n\n        } else if(pretarget.length>1){\n          const lengthArr = pretarget.map(d=>d[0].length);\n          const maxIndex = pretarget.findIndex(d=>d[0].length==Math.max(...lengthArr));\n          const targetData = pretarget[maxIndex][0];\n          this.contourCoordArr = targetData;\n        } else{\n          console.log('undefined?')\n        }\n\n          map.setPaintProperty('precincts',\n          'fill-color',\n          ['case',\n          ['all',this.isCounty,this.isClickPrecinct],'#333238',\n          ['all',this.isCounty,this.isNotClickPrecinct],'#282828',\n          '#FFFFFF'\n          ]\n          );\n          map.setPaintProperty('precincts',\n          'fill-opacity',\n          ['case',\n          ['all',this.isCounty,this.isClickPrecinct],0.8,0.5\n          ]\n          )\n          \n          this.contourLength=this.contourCoordArr.length;\n          const targetIndex = Math.floor(this.contourLength/2)\n\n          const point=Array.from(this.contourCoordArr)\n\n          var newCenter =[];\n          newCenter[0]=point[targetIndex]['0'];\n          newCenter[1]=point[targetIndex]['1'];\n\n\n          map.flyTo({\n            center:newCenter,\n            zoom:12,\n            pitch:60\n          })\n\n      \n        this.createContourLine()\n      }\n      })\n\n},\n    filterCounty(){\n      map.setPaintProperty('precincts', 'fill-color',\n      ['case',['==',['get','county'],`${this.selectedCounty}`],\n      '#1A1A1A',\n      '#FFFFFF']);\n    },\n    startLoading(){\n    console.log('loading start')\n    this.isLoading=true;\n      },\n      endLoading(){\n        this.isLoading=false;\n    },\n    createContourLine(){\n\n      if(this.frameCount<this.contourLength && this.contourCoordArr){\n        const lng=this.contourCoordArr[this.frameCount][0]\n        const lat=this.contourCoordArr[this.frameCount][1];\n        \n        this.contourGeoJson.features[0]\n        .geometry\n        .coordinates[this.frameCount]=[lng,lat];\n\n        map.getSource('contourline').setData(this.contourGeoJson)\n        this.frameCount++\n        }\n      else if(this.frameCount>=this.contourLength &&this.contourCoordArr){\n        this.frameCount=0;\n        this.contourLength=undefined;\n        this.contourCoordArr=undefined;\n        this.contourGeoJson={'type': 'FeatureCollection',\n        'features': [{\n          'type': 'Feature',\n          'geometry': {\n            'type': 'LineString',\n            'coordinates': [\n                []\n            ]\n        }\n        }]\n        }\n        cancelAnimationFrame(this.lineAnimation)\n      }\n      this.lineAnimation=requestAnimationFrame(this.createContourLine)\n      \n      \n      \n\n    }\n  },\n  computed:{\n    yearSelected(){\n      return this.$store.getters.yearSelected;\n    },\n    selectedCounty(){\n      return this.$store.getters.boroughSelected;\n    },\n  },\n  async mounted(){\n    this.startLoading()\n    this.viewOrigin=this.origins[`${this.selectedCounty}`];\n    mapboxgl.accessToken=this.accessToken\n    map= new mapboxgl.Map({\n    container: 'map',\n    style: this.mapStyle,\n    zoom: this.zoomLevel,\n    center: this.viewOrigin,\n    pitch: this.pitch,\n    antialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n    });\n    this.precinctGeoJson=await this.$store.getters['ByGeoData/precinctGeoJson']\n    this.$store.dispatch('loadingChange',false)\n    this.mapStyle='mapbox://styles/jotnajoa/ckpog2xlj0rjp19qjnvu8lg3v';\n    this.accessToken='pk.eyJ1Ijoiam90bmFqb2EiLCJhIjoiY2tibnV5bmx0MGF5eTJxcG40NXpvOXB6eCJ9.__awhLNPyWEzCNoGzsM3Pw';\n   \n\n    this.isCounty=['==',['get','county'],this.selectedCounty];\n\n    this.contourGeoJson={\n    'type': 'FeatureCollection',\n    'features': [{\n        'type': 'Feature',\n        'geometry': {\n            'type': 'LineString',\n            'coordinates': [\n                []\n            ]\n        }\n    }]\n};\n\n\n\n\n  setTimeout(()=>{\n    this.createLayer(this.yearSelected);\n    this.endLoading()\n  },1500)\n},\nwatch:{\n  selectedCounty:function(val){\n    this.selectedCounty=val;\n    this.filterCounty()\n    this.clearContour()\n    map.flyTo(\n      {center:this.origins[`${this.selectedCounty}`],\n      zoom:11,\n      speed:0.5,\n      pitch:this.pitch,\n      easing(t){\n        return t*t\n      }\n      }\n      )\n      map.on('mousemove','precincts',this.cursorPointer);\n      map.on('mousemove','precincts',this.highlightPointer);\n      map.on('mouseleave','precincts',this.leavePointer)\n  }\n}\n}\n</script>\n<style scoped>\n#map{\n  position:absolute;\n  width:100vw;\n  height:100vh;\n  margin:0;\n  left:0;\n  top:0;\n  z-index:0;\n};\n\n.sub{\n  position:absolute;\n  z-index:5;\n  top:10rem;\n  left:10rem;\n  margin:0;\n  padding:0;\n}\n\n</style>"],"sourceRoot":""}]}